var sqliteh = function () { var t = 400, e = { dataBase: void 0, log: function (t) { console.log(t) }, bulkExecuteSql: function (t, e, n, r, i, u) { var l = function (t) { t.executeSql("ROLLBACK;") }, a = function (e, n) { t.addCallbackToQueue(!0, function () { void 0 !== i && i.call(this, e, n) }) }, o = function (e, n) { t.addCallbackToQueue(!0, function () { void 0 !== u && u.call(this, e, n) }), l(e) }; void 0 !== e ? e.executeSql(n, r, a, o) : DataBase.transaction(function (t) { t.executeSql(n, r, a, o) }) }, QueryBuilder: function (e, n, r) { var i = "", u = { insertQuery: "", finalQueryToExecuteList: [] }, l = n.length, a = 1, o = function (t, e) { var n, r = "", i = 0; for (n in e) r += n + " ,"; return i = r.length, "INSERT INTO " + t + " (" + r.substring(0, 0 == i ? 0 : r.length - 1) + ") " }, s = function (t) { var e, n = "", r = 0; for (e in t) n += "'" + t[e] + "' ,"; return r = n.length, n.substring(0, 0 == r ? 0 : n.length - 1) }; for (a; l >= a; a++) { var c = n[a - 1], f = r(a, c); "" == u.insertQuery && (u.insertQuery = o(e, f)), (a + 1) % t === 0 ? (i += "  SELECT  " + s(f), u.finalQueryToExecuteList.push(" Select * from (" + i + " )"), i = "") : l === a ? (i += "  SELECT  " + s(f), u.finalQueryToExecuteList.push(" Select * from (" + i + " )"), i = "") : i = i + " SELECT " + s(f) + " UNION ALL " } return u }, QueryBuilderReading: function (t, e, n, r) { var i = "", u = "", l = function (t, e) { var n, r = "", i = 0; for (n in e) r += n + " ,"; return i = r.length, "INSERT INTO " + t + " (" + r.substring(0, 0 == i ? 0 : r.length - 1) + ") " }, a = function (t) { var e, n = "", r = 0; for (e in t) n += "'" + t[e] + "' ,"; return r = n.length, n.substring(0, 0 == r ? 0 : n.length - 1) }; n = parseInt(n); for (var o = 0; o < e.length; o++) for (var s = 1; n >= s; s++) { var c = r(s, e[o]); "" == u && (u = l(t, c)), i += s == n && o == e.length - 1 ? "SELECT " + a(c) : "SELECT " + a(c) + "  union all " } return u + i }, tableToList: function (t) { if (t.rows.length > 0) { for (var e = [], n = 0; n < t.rows.length; n++) { var r = t.rows.item(n), i = {}; for (var u in r) i[u] = r[u]; e.push(i) } return e } return [] }, tableResultManupulate: function (t) { this.SQLResultSet = t, this.length = t.rows.length, this.SQLResultSet.toList = function () { return e.tableToList(t) } }, listToString: function (t) { for (var e = "", n = 0; n < t.length; n++) e += t[n] + ","; return e.substring(0, e.length - 1) }, findDuplicate: function (t) { var e, n, r = []; for (e = 0, n = t.length; n > e; e++) -1 === r.indexOf(t[e]) && -1 !== t.indexOf(t[e], e + 1) && r.push(t[e]); return r } }, n = { dataBase: e.dataBase, executeSql: function (t, n, r, i) { var u = function (r, u) { e.log("Error: " + t + ", value: " + JSON.stringify(n)), i !== i && i.call(this, u) }, l = function (t, n) { if (void 0 !== r) { var i = new e.tableResultManupulate(n); r.call(this, i.SQLResultSet) } }; sqliteh.dataBase.transaction(function (e) { e.executeSql(t, n, l, u) }) }, bulkExecuteSql: function (t, r, i, u, l) { for (var a = e.QueryBuilder(t, r, i), o = 0; o < a.finalQueryToExecuteList.length; o++) n.executeSql(a.insertQuery + a.finalQueryToExecuteList[0], [], u, l) }, tableToList: e.tableToList, listToString: e.listToString, findDuplicate: e.findDuplicate }; return n }();